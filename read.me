# Infrastructure Take-Home Exercise

## Objective
Create a containerized microservice and deploy it to a local Kubernetes.
#######################################################################################################################
## Requirements
1. **Microservice**: A Flask app that returns a JSON response.
2. **Dockerization**: A Dockerfile to build and run the application.
3. **Kubernetes Deployment**: A manifest to deploy the application.
4. **Automating Deployment**: A script to build and deploy the application.
#######################################################################################################################
## Setup Instructions
1. Ensure you have the following installed:
   - Docker Desktop
   - Kubernetes (Minikube)
   - Python (version 3.13.0rc2 or later)
   
   Before proceeding:

   - Connect to Docker on Docker Desktop: Make sure Docker Desktop is running and you are logged in.
   - Enable Kubernetes on Docker Desktop: Go to the settings, check "Enable Kubernetes," and click "Apply & Restart."

2. Create and Activate a Virtual Environment
To create and activate a Python virtual environment, run the following commands (windows):

   - python -m venv venv
   - venv\Scripts\activate










#######################################################################################################################
## Part 1 - Microservices Overview

1.Make sure you have Python installed. Check your Python version:

   - python --version  # Expected: Python 3.13.0rc2

   - pip install flask  # Version: 3.1.0
   - pip install gunicorn  # Version: 24.2
   - pip install waitress  # Version: 24.2


2.Start the application using Waitress:

   - waitress-serve --host=localhost --port=5000 app:app


3.access the service through the following endpoints:

   - Root endpoint: http://127.0.0.1:5000/student
   - Alternatively, use: http://localhost:5000/student


curl http://localhost:5000/student








#######################################################################################################################
## Part 2 - Dockerization Overview

2. Check Docker Installation
Verify that Docker is installed and check the version:

   - docker --version  # Should return: Docker version 20.10.17, build 100c701
   - docker login

3.Clean Up Docker Images (Optional)
Remove all existing images to avoid conflicts:

   - docker rmi -f $(docker images -aq)

4. Build the Docker Image
Create the Docker image for your Flask app:

   - docker build -t student-microservice:latest .
  
6. Run the Docker Container
Start Flask app in a Docker container:

   - docker run -d -p 5000:5000 student-microservice

7. Check Running Containers
List all containers to verify the build:

   - docker ps -a

8. Check for Port Conflicts
Identify if any process is using port 5000:

   - netstat -ano | findstr :5000

9. Stop Conflicting Process
If a conflicting process is found, stop it using the following command (replace id with the actual PID):

   - Stop-Process -Id id

10. Check Logs for Issues
Monitor the logs for any potential issues:

   - docker logs <container_id> dd23d911b26b
   - docker ps

11. Testing the Application
Once you see the "waitress" message, open Docker Desktop, scroll to the image, and click on "Browser." Then visit:
   - curl http://localhost:5000/student
   - http://localhost:5000/
   - http://localhost:5000/student









#######################################################################################################################
## Part 3 - Kubernetes Deployment Overview

1. Prerequisites
On Docker Desktop Check the box labeled "Enable Kubernetes."  
& Click "Apply & Restart" to apply the changes.
- Ensure Docker is running.
docker build -t student-microservice .

2. Start Minikube (Ensure docker i s runiing)
Start  Minikube cluster:

   - minikube start 
check the status of the Minikube cluster 
   - minikube status 


3.Load the Docker image into the Minikube environment:
   - minikube image load student-microservice


4. Create Resources
a deployment.yaml 
   - kubectl apply -f deployment.yaml

a Service.yaml 
   - kubectl apply -f service.yaml


5. Check Deployments and Pods
Verify that the deployment and pods are running:

   - kubectl get deployments
   - kubectl get pods
   - kubectl get nodes 

==== Pods Not Starting (ErrImagePull / ImagePullBackOff)
6. List Minikube Services
Check the list of services to ensure your service is created:

   - minikube service list

7. Troubleshooting ImagePullBackOff
If you encounter ErrImagePull or ImagePullBackOff, ensure the image is loaded into Minikube

8. Access the Service
To access the service, use the following command:

   - minikube service student-service --url
This command will display a URL.
 Open the URL in your browser to access the service. : http://127.0.0.1:59411

9. Testing and Verifications

List all pods in the current namespace 
   - minikube get pods 

List all services in the Minikube cluster
   - minikube get service list 

Display information about the nodes in the Minikube cluster
   - minikube get nodes

Check the status of Minikube:

   - minikube status

Check all pods across namespaces:

   - minikube kubectl -- get pods -A








#######################################################################################################################


## Part 4 - Automating Deployment

### Overview
In this part, you will automate the deployment of the microservice into a Kubernetes cluster using a single command. The target cluster will be an instance of Minikube, which should be running on your local machine prior to executing the deployment script.

run 
   - bash ./build-and-deploy.sh

